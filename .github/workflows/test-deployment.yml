name: Test Deployment Configuration

on:
  workflow_dispatch:  # Manual trigger only
  push:
    branches: [test-deployment]  # Or trigger on a test branch

jobs:
  validate-config:
    runs-on: ubuntu-latest
    name: Validate Configuration Files

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required files
        run: |
          echo "=== Checking Required Files ==="

          files=(
            "ecosystem.config.js"
            "requirements.txt"
            "login.py"
            ".env.example"
            "pages/main_app.py"
            "utils/webhook_client.py"
            "utils/config.py"
          )

          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "✗ $file is missing!"
              exit 1
            fi
          done

          echo "✅ All required files present"

      - name: Validate Python syntax
        run: |
          echo "=== Validating Python Syntax ==="
          python3 -m py_compile login.py
          find . -name "*.py" -path "./pages/*" -exec python3 -m py_compile {} \;
          find . -name "*.py" -path "./utils/*" -exec python3 -m py_compile {} \;
          find . -name "*.py" -path "./components/*" -exec python3 -m py_compile {} \;
          echo "✅ Python syntax validation passed"

      - name: Validate PM2 ecosystem config
        run: |
          echo "=== Validating PM2 Ecosystem Config ==="

          # Install Node.js to validate the config file
          sudo apt-get update
          sudo apt-get install -y nodejs npm

          # Install PM2
          sudo npm install -g pm2

          # Validate the ecosystem file
          if pm2 ecosystem; then
            echo "✓ PM2 ecosystem command works"
          fi

          # Check if our config is valid JavaScript
          if node -c ecosystem.config.js; then
            echo "✓ ecosystem.config.js is valid JavaScript"
          else
            echo "✗ ecosystem.config.js has syntax errors"
            exit 1
          fi

          echo "✅ PM2 configuration valid"

  test-python-setup:
    runs-on: ubuntu-latest
    name: Test Python Dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          echo "=== Installing Python Dependencies ==="
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ All dependencies installed successfully"

      - name: Test imports
        run: |
          echo "=== Testing Python Imports ==="
          python3 -c "import streamlit; print(f'Streamlit version: {streamlit.__version__}')"
          python3 -c "import requests; print(f'Requests version: {requests.__version__}')"
          python3 -c "from dotenv import load_dotenv; print('python-dotenv OK')"
          echo "✅ All imports successful"

  test-ssh-connection:
    runs-on: ubuntu-latest
    name: Test SSH Connection to Droplet
    if: github.event_name == 'workflow_dispatch'  # Only on manual trigger

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test SSH connectivity
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          script: |
            echo "=== SSH Connection Successful ==="
            echo "Hostname: $(hostname)"
            echo "OS: $(uname -s)"
            echo "Kernel: $(uname -r)"
            echo "User: $(whoami)"
            echo "Home: $HOME"

      - name: Check droplet environment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          script: |
            echo "=== Checking Required Software ==="

            # Check Python
            if command -v python3 &> /dev/null; then
              echo "✓ Python3: $(python3 --version)"
            else
              echo "✗ Python3 not installed"
            fi

            # Check pip
            if command -v pip3 &> /dev/null; then
              echo "✓ pip3: $(pip3 --version)"
            else
              echo "✗ pip3 not installed"
            fi

            # Check PM2
            if command -v pm2 &> /dev/null; then
              echo "✓ PM2: $(pm2 --version)"
            else
              echo "✗ PM2 not installed"
              echo "Install with: npm install -g pm2"
            fi

            # Check Git
            if command -v git &> /dev/null; then
              echo "✓ Git: $(git --version)"
            else
              echo "✗ Git not installed"
            fi

            # Check if app directory exists
            if [ -d "${{ secrets.DROPLET_APP_PATH }}" ]; then
              echo "✓ App directory exists: ${{ secrets.DROPLET_APP_PATH }}"
              cd "${{ secrets.DROPLET_APP_PATH }}"

              # Check if it's a git repo
              if [ -d ".git" ]; then
                echo "✓ Git repository initialized"
                echo "Current branch: $(git branch --show-current)"
                echo "Latest commit: $(git log -1 --oneline)"
              else
                echo "✗ Not a git repository"
              fi
            else
              echo "✗ App directory does not exist: ${{ secrets.DROPLET_APP_PATH }}"
            fi

            echo "=== Environment Check Complete ==="

      - name: Test PM2 status
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          script: |
            echo "=== PM2 Process Status ==="

            if command -v pm2 &> /dev/null; then
              pm2 list
              echo ""

              if pm2 describe for-classification > /dev/null 2>&1; then
                echo "✓ 'for-classification' process found"
                pm2 info for-classification
              else
                echo "ℹ️  'for-classification' process not running (will be started on first deployment)"
              fi
            else
              echo "⚠️  PM2 not installed on droplet"
            fi

  summary:
    runs-on: ubuntu-latest
    needs: [validate-config, test-python-setup]
    if: always()
    name: Summary

    steps:
      - name: Summary
        run: |
          echo "=== Deployment Test Summary ==="
          echo "==============================="

          if [ "${{ needs.validate-config.result }}" == "success" ]; then
            echo "✓ Configuration files valid"
          else
            echo "✗ Configuration validation failed"
          fi

          if [ "${{ needs.test-python-setup.result }}" == "success" ]; then
            echo "✓ Python dependencies OK"
          else
            echo "✗ Python dependency test failed"
          fi

          echo ""
          echo "To run SSH connectivity tests:"
          echo "1. Go to Actions tab"
          echo "2. Select 'Test Deployment Configuration'"
          echo "3. Click 'Run workflow'"
          echo ""
          echo "Required GitHub Secrets for deployment:"
          echo "  - DROPLET_HOST (droplet IP or hostname)"
          echo "  - DROPLET_USER (SSH username, e.g., 'ubuntu')"
          echo "  - DROPLET_SSH_KEY (private SSH key)"
          echo "  - DROPLET_APP_PATH (app directory path)"
          echo "  - DROPLET_HEALTH_URL (optional: http://your-domain.com)"
          echo "  - SUPABASE_URL"
          echo "  - SUPABASE_KEY"
          echo "  - NEO4J_URI, NEO4J_USERNAME, NEO4J_PASSWORD, NEO4J_DATABASE"
          echo "  - DEFAULT_WEBHOOK_URL"
          echo "  - ADMIN_EMAIL"

          if [ "${{ needs.validate-config.result }}" != "success" ] || [ "${{ needs.test-python-setup.result }}" != "success" ]; then
            echo ""
            echo "⚠️  Some tests failed. Check the logs above for details."
            exit 1
          fi

          echo ""
          echo "✅ All basic tests passed!"
