name: Deploy FoR Classification System

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: for-classification/streamlit

jobs:
  # Test job
  test:
    runs-on: ubuntu-latest
    name: Test Application

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run syntax check
        run: |
          python -m py_compile login.py
          find . -name "*.py" -path "./pages/*" -exec python -m py_compile {} \;
          find . -name "*.py" -path "./utils/*" -exec python -m py_compile {} \;
          find . -name "*.py" -path "./components/*" -exec python -m py_compile {} \;

      - name: Test Docker build
        run: |
          docker build -t test-image .
          docker run --rm --name test-container -d test-image
          sleep 10
          docker stop test-container || true

  # Build and push Docker image
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    name: Build and Push Docker Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}

      - name: Login to DO Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Debug - Show Docker tags
        run: |
          echo "=== Docker tags to be built ==="
          echo "${{ steps.meta.outputs.tags }}"
          echo "=== Docker labels ==="
          echo "${{ steps.meta.outputs.labels }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Verify Docker image push
        run: |
          echo "=== Verifying image was pushed to registry ==="
          doctl registry repository list-tags for-classification/streamlit || echo "Failed to list tags"

  # Deploy to Digital Ocean App Platform
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    name: Deploy to Digital Ocean App Platform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}

      - name: Validate app_registry.yaml
        run: |
          echo "=== Validating app_registry.yaml ==="
          if [ ! -f app_registry.yaml ]; then
            echo "::error::app_registry.yaml not found!"
            exit 1
          fi
          echo "File exists. Contents:"
          cat app_registry.yaml
          echo "=== End of app_registry.yaml ==="

      - name: Update app_registry.yaml with image tag
        run: |
          echo "=== Updating image tag to ${{ github.sha }} ==="
          sed -i "s|tag: latest|tag: ${{ github.sha }}|g" app_registry.yaml
          echo "Updated app_registry.yaml:"
          cat app_registry.yaml

      - name: Test doctl connectivity
        run: |
          echo "=== Testing DigitalOcean API connectivity ==="
          doctl account get
          echo "=== Listing existing apps ==="
          doctl apps list || echo "No apps found or error listing apps"

      - name: Deploy to Digital Ocean App Platform
        run: |
          set -e
          echo "=== Starting deployment ==="
          echo "App name from secrets: ${{ secrets.DO_APP_NAME }}"

          # Check if app exists
          if doctl apps list --format Name --no-header | grep -q "${{ secrets.DO_APP_NAME }}"; then
            echo "Found existing app: ${{ secrets.DO_APP_NAME }}"
            echo "Updating existing app..."
            doctl apps update "${{ secrets.DO_APP_NAME }}" --spec app_registry.yaml --wait --verbose
          else
            echo "App ${{ secrets.DO_APP_NAME }} not found. Creating new app..."
            doctl apps create --spec app_registry.yaml --wait --verbose
          fi

          echo "=== Deployment command completed ==="

      - name: Get app URL
        run: |
          APP_URL=$(doctl apps get ${{ secrets.DO_APP_NAME }} --format LiveURL --no-header)
          echo "Application deployed successfully!"
          echo "App URL: $APP_URL"
          echo "::notice title=Deployment Success::Application deployed to $APP_URL"

  # Notify on failure
  notify:
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: failure()
    name: Notify on Failure

    steps:
      - name: Determine Failure Point
        run: |
          echo "=== Deployment Pipeline Status ==="
          echo "=================================="

          if [ "${{ needs.test.result }}" != "success" ] && [ "${{ needs.test.result }}" != "skipped" ]; then
            echo "❌ Test job failed"
            echo "::error title=Test Failed::The test job failed. Check test logs for Python syntax errors or Docker build issues."
          fi

          if [ "${{ needs.build.result }}" != "success" ] && [ "${{ needs.build.result }}" != "skipped" ]; then
            echo "❌ Build job failed"
            echo "::error title=Build Failed::Docker image build or push to registry failed. Check if DO registry exists and DO_ACCESS_TOKEN is valid."
          fi

          if [ "${{ needs.deploy.result }}" != "success" ] && [ "${{ needs.deploy.result }}" != "skipped" ]; then
            echo "❌ Deploy job failed"
            echo "::error title=Deploy Failed::App deployment to DigitalOcean failed. Check app_registry.yaml syntax and DO_APP_NAME secret."
          fi

          echo ""
          echo "Debug steps:"
          echo "1. Click on the failed job above"
          echo "2. Expand the failed step (marked with ❌)"
          echo "3. Look for error messages in red text"
          echo "4. Common issues:"
          echo "   - Missing secrets (DO_ACCESS_TOKEN, DO_APP_NAME)"
          echo "   - Registry doesn't exist in DigitalOcean"
          echo "   - Invalid YAML syntax in app_registry.yaml"
          echo "   - Docker build errors (missing files, syntax errors)"