name: Deploy FoR Classification System

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger

jobs:
  # Test job
  test:
    runs-on: ubuntu-latest
    name: Test Application

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run syntax check
        run: |
          python -m py_compile login.py
          find . -name "*.py" -path "./pages/*" -exec python -m py_compile {} \;
          find . -name "*.py" -path "./utils/*" -exec python -m py_compile {} \;
          find . -name "*.py" -path "./components/*" -exec python -m py_compile {} \;

      - name: Validate configuration files
        run: |
          echo "=== Checking required files ==="

          files=(
            "ecosystem.config.js"
            "requirements.txt"
            "login.py"
            ".env.example"
          )

          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "✗ $file is missing!"
              exit 1
            fi
          done

          echo "✅ All required files present"

  # Deploy to Ubuntu Droplet via SSH
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    name: Deploy to Ubuntu Droplet (PM2)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Droplet
        uses: appleboy/ssh-action@v1.0.0
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          NEO4J_URI: ${{ secrets.NEO4J_URI }}
          NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
          NEO4J_DATABASE: ${{ secrets.NEO4J_DATABASE }}
          DEFAULT_WEBHOOK_URL: ${{ secrets.DEFAULT_WEBHOOK_URL }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          envs: SUPABASE_URL,SUPABASE_KEY,NEO4J_URI,NEO4J_USERNAME,NEO4J_PASSWORD,NEO4J_DATABASE,DEFAULT_WEBHOOK_URL,ADMIN_EMAIL
          script: |
            echo "=== Starting deployment ==="

            # Navigate to application directory
            cd ${{ secrets.DROPLET_APP_PATH }}

            echo "=== Pulling latest code ==="
            git fetch origin
            git reset --hard origin/main

            echo "=== Updating Python dependencies ==="
            pip3 install --user -r requirements.txt --quiet

            echo "=== Creating/updating .env file ==="
            cat > .env << EOF
            # Auto-generated by GitHub Actions on $(date)
            SUPABASE_URL=${SUPABASE_URL}
            SUPABASE_KEY=${SUPABASE_KEY}
            NEO4J_URI=${NEO4J_URI}
            NEO4J_USERNAME=${NEO4J_USERNAME}
            NEO4J_PASSWORD=${NEO4J_PASSWORD}
            NEO4J_DATABASE=${NEO4J_DATABASE}
            DEFAULT_WEBHOOK_URL=${DEFAULT_WEBHOOK_URL}
            ADMIN_EMAIL=${ADMIN_EMAIL}
            APP_ENV=production
            APP_NAME=FoR Classification System
            SESSION_TIMEOUT_MINUTES=60
            STREAMLIT_SERVER_PORT=8501
            STREAMLIT_SERVER_ADDRESS=0.0.0.0
            STREAMLIT_SERVER_HEADLESS=true
            STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
            EOF

            echo "=== Creating logs directory ==="
            mkdir -p logs

            echo "=== Restarting PM2 process ==="
            # Check if PM2 process exists
            if pm2 describe for-classification > /dev/null 2>&1; then
              echo "Process exists, reloading..."
              pm2 reload for-classification --update-env
            else
              echo "Process doesn't exist, starting..."
              pm2 start ecosystem.config.js
            fi

            # Save PM2 process list
            pm2 save

            echo "=== Checking PM2 status ==="
            pm2 list
            pm2 info for-classification

            echo "✅ Deployment completed successfully"

      - name: Health Check
        run: |
          echo "=== Waiting for application to start ==="
          sleep 15

          echo "=== Performing health check ==="
          # Use the droplet's public URL for health check
          HEALTH_URL="${{ secrets.DROPLET_HEALTH_URL }}"

          if [ -n "$HEALTH_URL" ]; then
            if curl -f "$HEALTH_URL/_stcore/health" --max-time 10; then
              echo "✅ Application is healthy"
            else
              echo "⚠️  Health check failed, but deployment completed"
              echo "Check application logs: ssh ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }} 'pm2 logs for-classification'"
            fi
          else
            echo "⚠️  DROPLET_HEALTH_URL not configured, skipping health check"
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "=== Deployment Summary ==="
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Deployed to: ${{ secrets.DROPLET_HOST }}"
          echo "Application path: ${{ secrets.DROPLET_APP_PATH }}"
          echo ""
          echo "To view logs: ssh ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }} 'pm2 logs for-classification'"
          echo "To restart: ssh ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }} 'pm2 restart for-classification'"

  # Notify on failure
  notify:
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: failure()
    name: Notify on Failure

    steps:
      - name: Determine Failure Point
        run: |
          echo "=== Deployment Pipeline Status ==="
          echo "=================================="

          if [ "${{ needs.test.result }}" != "success" ] && [ "${{ needs.test.result }}" != "skipped" ]; then
            echo "❌ Test job failed"
            echo "::error title=Test Failed::The test job failed. Check test logs for Python syntax errors."
          fi

          if [ "${{ needs.deploy.result }}" != "success" ] && [ "${{ needs.deploy.result }}" != "skipped" ]; then
            echo "❌ Deploy job failed"
            echo "::error title=Deploy Failed::SSH deployment to droplet failed. Check SSH credentials and droplet connectivity."
          fi

          echo ""
          echo "Debug steps:"
          echo "1. Click on the failed job above"
          echo "2. Expand the failed step (marked with ❌)"
          echo "3. Look for error messages in red text"
          echo "4. Common issues:"
          echo "   - Missing secrets (DROPLET_HOST, DROPLET_USER, DROPLET_SSH_KEY, DROPLET_APP_PATH)"
          echo "   - SSH connection issues"
          echo "   - Git repository not initialized on droplet"
          echo "   - PM2 not installed on droplet"
          echo "   - Python dependencies installation errors"
