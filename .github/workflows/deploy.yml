name: Deploy FoR Classification System

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: for-classification/streamlit

jobs:
  # Test job
  test:
    runs-on: ubuntu-latest
    name: Test Application

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run syntax check
        run: |
          python -m py_compile login.py
          find . -name "*.py" -path "./pages/*" -exec python -m py_compile {} \;
          find . -name "*.py" -path "./utils/*" -exec python -m py_compile {} \;
          find . -name "*.py" -path "./components/*" -exec python -m py_compile {} \;

      - name: Test Docker build and connections
        run: |
          echo "=== Building Docker image ==="
          docker build -t test-image .

          echo "=== Testing connections in container ==="
          docker run --rm \
            -e SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
            -e SUPABASE_KEY="${{ secrets.SUPABASE_KEY }}" \
            -e ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}" \
            -e DEFAULT_WEBHOOK_URL="https://mbcrc.app.n8n.cloud/webhook/530ec5fa-656a-4c9c-bb05-5be7ff3bdef2" \
            test-image python test_connections.py

          echo "=== Testing container startup ==="
          docker run --rm --name test-container -d \
            -e STREAMLIT_SERVER_PORT=8501 \
            -e STREAMLIT_SERVER_ADDRESS=0.0.0.0 \
            -e STREAMLIT_SERVER_HEADLESS=true \
            -e SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
            -e SUPABASE_KEY="${{ secrets.SUPABASE_KEY }}" \
            -e ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}" \
            test-image

          sleep 15

          echo "=== Checking container health ==="
          docker exec test-container curl -f http://localhost:8501/_stcore/health || {
            echo "Container health check failed"
            docker logs test-container
            docker stop test-container
            exit 1
          }

          docker stop test-container || true
          echo "✅ All container tests passed"

  # Build and push Docker image
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    name: Build and Push Docker Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}

      - name: Login to DO Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}
            type=raw,value=main-${{ github.sha }},enable={{is_default_branch}}

      - name: Debug - Show Docker tags
        run: |
          echo "=== Docker tags to be built ==="
          echo "${{ steps.meta.outputs.tags }}"
          echo "=== Docker labels ==="
          echo "${{ steps.meta.outputs.labels }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Verify Docker image push
        run: |
          echo "=== Verifying image was pushed to registry ==="

          # Get registry name dynamically
          REGISTRY_NAME=$(doctl registry get --format Name --no-header)
          echo "Registry name: $REGISTRY_NAME"

          # The repository path should be {registry-name}/streamlit
          REPO_PATH="${REGISTRY_NAME}/streamlit"
          echo "Checking repository: $REPO_PATH"

          if doctl registry repository list-tags "$REPO_PATH"; then
            echo "✅ Successfully pushed to registry"
            echo "Latest tags:"
            doctl registry repository list-tags "$REPO_PATH" --format Tag,UpdatedAt | head -5
          else
            echo "❌ Failed to verify image push"
            echo "Listing all repositories in registry:"
            doctl registry repository list-v2 "$REGISTRY_NAME" || echo "No repositories found"
          fi

  # Deploy to Digital Ocean App Platform
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    name: Deploy to Digital Ocean App Platform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}

      - name: Validate app_registry.yaml
        run: |
          echo "=== Validating app_registry.yaml ==="
          if [ ! -f app_registry.yaml ]; then
            echo "::error::app_registry.yaml not found!"
            exit 1
          fi
          echo "File exists. Contents:"
          cat app_registry.yaml
          echo "=== End of app_registry.yaml ==="

      - name: Update app_registry.yaml with image tag and secrets
        run: |
          echo "=== Updating app_registry.yaml ==="
          # Use the main-SHA tag format that was actually pushed
          IMAGE_TAG="main-${{ github.sha }}"

          echo "SHA: ${{ github.sha }}"
          echo "Using image tag: $IMAGE_TAG"

          echo "=== Updating image tag ==="
          sed -i "s|tag: latest|tag: $IMAGE_TAG|g" app_registry.yaml

          echo "=== Injecting secrets from GitHub Secrets ==="
          # Replace placeholders with actual values from GitHub secrets
          sed -i "s|\${SUPABASE_URL}|${{ secrets.SUPABASE_URL }}|g" app_registry.yaml
          sed -i "s|\${SUPABASE_KEY}|${{ secrets.SUPABASE_KEY }}|g" app_registry.yaml
          sed -i "s|\${ADMIN_EMAIL}|${{ secrets.ADMIN_EMAIL }}|g" app_registry.yaml

          echo "Updated app_registry.yaml (secrets masked):"
          # Show the file but mask the actual secret values
          cat app_registry.yaml | sed -e "s|${{ secrets.SUPABASE_URL }}|***SUPABASE_URL***|g" \
                                    -e "s|${{ secrets.SUPABASE_KEY }}|***SUPABASE_KEY***|g" \
                                    -e "s|${{ secrets.ADMIN_EMAIL }}|***ADMIN_EMAIL***|g"

      - name: Test doctl connectivity
        run: |
          echo "=== Testing DigitalOcean API connectivity ==="
          doctl account get
          echo "=== Listing existing apps ==="
          doctl apps list || echo "No apps found or error listing apps"

      - name: Verify Docker image exists in registry
        run: |
          echo "=== Verifying image exists in registry ==="
          IMAGE_TAG="main-${{ github.sha }}"

          # Get registry information
          echo "=== Registry Information ==="
          REGISTRY_INFO=$(doctl registry get 2>/dev/null)
          if [ $? -eq 0 ]; then
            echo "$REGISTRY_INFO"
            REGISTRY_NAME=$(echo "$REGISTRY_INFO" | awk 'NR==2 {print $1}')
            echo "Registry name: $REGISTRY_NAME"
          else
            echo "❌ Container registry not found!"
            echo "Create registry with: doctl registry create for-classification --region syd1"
            exit 1
          fi

          # List all repositories in the registry
          echo "=== Available repositories in registry ==="
          if doctl registry repository list-v2 "$REGISTRY_NAME" 2>/dev/null; then
            echo "✅ Registry accessible"
          else
            echo "❌ Failed to list repositories in registry"
            exit 1
          fi

          # Check if the streamlit repository exists using list-v2 which we know works
          echo "=== Checking streamlit repository ==="

          # Get repository info from list-v2 output which we know works
          REPO_INFO=$(doctl registry repository list-v2 "$REGISTRY_NAME" --format Name,LatestTag --no-header | grep "^streamlit")

          if [ -n "$REPO_INFO" ]; then
            echo "✅ Repository 'streamlit' found in registry"
            echo "Repository info: $REPO_INFO"

            # Extract the latest tag from the repository info
            LATEST_TAG=$(echo "$REPO_INFO" | awk '{print $2}')
            echo "Latest tag in repository: $LATEST_TAG"

            # Check if our expected tag matches the latest tag pattern
            if [[ "$LATEST_TAG" == "$IMAGE_TAG" ]]; then
              echo "✅ Expected image tag $IMAGE_TAG matches latest tag"
            elif [[ "$LATEST_TAG" =~ main-.* ]]; then
              echo "✅ Repository has main-branch tags (latest: $LATEST_TAG)"
              echo "⚠️  Expected: $IMAGE_TAG, Found: $LATEST_TAG"
              echo "This might be from a different commit, but the image should exist"
            else
              echo "⚠️  Latest tag format doesn't match expected pattern"
              echo "Expected: $IMAGE_TAG, Found: $LATEST_TAG"
            fi

            # Always proceed since we can see the repository exists and has tags
            echo "✅ Proceeding with deployment - repository and tags exist"
          else
            echo "❌ Repository 'streamlit' not found in registry $REGISTRY_NAME"
            echo "Available repositories:"
            doctl registry repository list-v2 "$REGISTRY_NAME" --format Name
            exit 1
          fi

      - name: Deploy to Digital Ocean App Platform
        run: |
          set -e
          echo "=== Starting deployment ==="
          APP_NAME="${{ secrets.DO_APP_NAME }}"
          echo "App name: $APP_NAME"

          echo "=== Checking existing apps ==="
          echo "All apps in account:"
          doctl apps list --format ID,Spec.Name,ActiveDeployment.ID,Updated

          # Simple and safe app detection using JSON output and jq
          echo "=== Looking for app with name: $APP_NAME ==="

          # Use jq for exact string matching (no regex, no special character issues)
          APP_ID=$(doctl apps list --output json | jq -r --arg name "$APP_NAME" '.[] | select(.spec.name == $name) | .id')

          if [ -n "$APP_ID" ]; then
            echo "Found existing app: $APP_NAME (ID: $APP_ID)"
            echo "Updating existing app..."
            doctl apps update "$APP_ID" --spec app_registry.yaml --wait --verbose
          else
            echo "App $APP_NAME not found in list above."
            echo "Attempting to create new app..."

            # Try to create, handle name conflict gracefully
            if doctl apps create --spec app_registry.yaml --wait --verbose 2>&1; then
              echo "✅ App created successfully"
            else
              CREATE_ERROR=$?
              echo "❌ App creation failed, checking if it exists now..."

              # Try to find the app again after failed creation
              sleep 5
              echo "Re-checking for app after creation attempt..."
              APP_ID=$(doctl apps list --output json | jq -r --arg name "$APP_NAME" '.[] | select(.spec.name == $name) | .id')

              if [ -n "$APP_ID" ]; then
                echo "✅ App exists now (ID: $APP_ID), updating instead..."
                doctl apps update "$APP_ID" --spec app_registry.yaml --wait --verbose
              else
                echo "❌ App creation failed and app still not found"
                exit $CREATE_ERROR
              fi
            fi
          fi

          echo "=== Deployment command completed ==="

      - name: Get app URL
        run: |
          echo "=== Getting app information ==="
          APP_NAME="${{ secrets.DO_APP_NAME }}"
          echo "App name: $APP_NAME"

          # Get app ID from app name since doctl apps get requires ID, not name
          APP_ID=$(doctl apps list --output json | jq -r --arg name "$APP_NAME" '.[] | select(.spec.name == $name) | .id')

          if [ -n "$APP_ID" ]; then
            echo "App ID: $APP_ID"

            # Get the live URL using the app ID
            APP_URL=$(doctl apps get "$APP_ID" --format LiveURL --no-header 2>/dev/null || echo "")

            if [ -n "$APP_URL" ]; then
              echo "Application deployed successfully!"
              echo "App URL: $APP_URL"
              echo "::notice title=Deployment Success::Application deployed to $APP_URL"
            else
              echo "⚠️  App deployed but URL not yet available (app may still be building)"
              echo "Check app status with: doctl apps get $APP_ID"
            fi
          else
            echo "❌ Could not find app with name: $APP_NAME"
            echo "Available apps:"
            doctl apps list --format Spec.Name,Updated,DefaultIngress
            exit 1
          fi

  # Notify on failure
  notify:
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: failure()
    name: Notify on Failure

    steps:
      - name: Determine Failure Point
        run: |
          echo "=== Deployment Pipeline Status ==="
          echo "=================================="

          if [ "${{ needs.test.result }}" != "success" ] && [ "${{ needs.test.result }}" != "skipped" ]; then
            echo "❌ Test job failed"
            echo "::error title=Test Failed::The test job failed. Check test logs for Python syntax errors or Docker build issues."
          fi

          if [ "${{ needs.build.result }}" != "success" ] && [ "${{ needs.build.result }}" != "skipped" ]; then
            echo "❌ Build job failed"
            echo "::error title=Build Failed::Docker image build or push to registry failed. Check if DO registry exists and DO_ACCESS_TOKEN is valid."
          fi

          if [ "${{ needs.deploy.result }}" != "success" ] && [ "${{ needs.deploy.result }}" != "skipped" ]; then
            echo "❌ Deploy job failed"
            echo "::error title=Deploy Failed::App deployment to DigitalOcean failed. Check app_registry.yaml syntax and DO_APP_NAME secret."
          fi

          echo ""
          echo "Debug steps:"
          echo "1. Click on the failed job above"
          echo "2. Expand the failed step (marked with ❌)"
          echo "3. Look for error messages in red text"
          echo "4. Common issues:"
          echo "   - Missing secrets (DO_ACCESS_TOKEN, DO_APP_NAME)"
          echo "   - Registry doesn't exist in DigitalOcean"
          echo "   - Invalid YAML syntax in app_registry.yaml"
          echo "   - Docker build errors (missing files, syntax errors)"