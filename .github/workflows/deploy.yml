name: Deploy FoR Classification System

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: for-classification/streamlit

jobs:
  # Test job
  test:
    runs-on: ubuntu-latest
    name: Test Application

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run syntax check
        run: |
          python -m py_compile login.py
          find . -name "*.py" -path "./pages/*" -exec python -m py_compile {} \;
          find . -name "*.py" -path "./utils/*" -exec python -m py_compile {} \;
          find . -name "*.py" -path "./components/*" -exec python -m py_compile {} \;

      - name: Test Docker build
        run: |
          docker build -t test-image .
          docker run --rm --name test-container -d test-image
          sleep 10
          docker stop test-container || true

  # Build and push Docker image
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    name: Build and Push Docker Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}

      - name: Login to DO Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Deploy to Digital Ocean App Platform
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    name: Deploy to Digital Ocean App Platform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_ACCESS_TOKEN }}

      - name: Update app_registry.yaml with image tag
        run: |
          # Update the app_registry.yaml with the correct image tag
          sed -i "s|tag: latest|tag: ${{ github.sha }}|g" app_registry.yaml
          cat app_registry.yaml

      - name: Deploy to Digital Ocean App Platform
        run: |
          # Check if app exists
          if doctl apps list --format Name --no-header | grep -q "${{ secrets.DO_APP_NAME }}"; then
            echo "Updating existing app..."
            doctl apps update ${{ secrets.DO_APP_NAME }} --spec app_registry.yaml --wait
          else
            echo "Creating new app..."
            doctl apps create --spec app_registry.yaml --wait
          fi

      - name: Get app URL
        run: |
          APP_URL=$(doctl apps get ${{ secrets.DO_APP_NAME }} --format LiveURL --no-header)
          echo "Application deployed successfully!"
          echo "App URL: $APP_URL"
          echo "::notice title=Deployment Success::Application deployed to $APP_URL"

  # Notify on failure
  notify:
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: failure()
    name: Notify on Failure

    steps:
      - name: Notification
        run: |
          echo "::error title=Deployment Failed::The deployment pipeline failed. Check the logs for details."